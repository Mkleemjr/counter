{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Counter","increment","state","count","setState","incrementByTwo","decrement","decrementByTwo","toggleIncDisp","toggleDecDisp","toggleInc","counter","toggleDec","clear","className","this","type","onClick","onMouseEnter","Component","Boolean","window","location","hostname","match","ReactDOM","render","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8MAwIeA,E,YArIb,aAAe,IAAD,8BACZ,+CASFC,UAAY,WACN,EAAKC,MAAMC,MAAQ,GACrB,EAAKC,SAAS,CACZD,MAAO,EAAKD,MAAMC,MAAQ,IAG5B,EAAKC,SAAS,CACZD,MAAO,MAjBC,EAsBdE,eAAiB,WACV,EAAKH,MAAMC,MAAQ,IAA6B,KAArB,EAAKD,MAAMC,MACzC,EAAKC,SAAS,CACZD,MAAO,EAAKD,MAAMC,MAAQ,IAG5B,EAAKC,SAAS,CACZD,MAAO,MA7BC,EAkCdG,UAAY,WACN,EAAKJ,MAAMC,MAAQ,EACrB,EAAKC,SAAS,CACZD,MAAO,EAAKD,MAAMC,MAAQ,IAG5B,EAAKC,SAAS,CACZD,MAAO,KAzCC,EA8CdI,eAAiB,WACV,EAAKL,MAAMC,MAAQ,GAA4B,IAArB,EAAKD,MAAMC,MACxC,EAAKC,SAAS,CACZD,MAAO,EAAKD,MAAMC,MAAQ,IAG5B,EAAKC,SAAS,CACZD,MAAO,KArDC,EA0DdK,cAAgB,WACe,sBAAzB,EAAKN,MAAMD,UACb,EAAKG,SAAS,CACZH,UAAW,sBAIb,EAAKG,SAAS,CACZH,UAAW,uBAlEH,EAuEdQ,cAAgB,WACe,sBAAzB,EAAKP,MAAMI,UACb,EAAKF,SAAS,CACZE,UAAW,sBAIb,EAAKF,SAAS,CACZE,UAAW,uBA/EH,EAoFdI,UAAY,WACmB,sBAAzB,EAAKR,MAAMD,UACb,EAAKG,SAAS,CACZO,QAAS,EAAKV,cAEkB,sBAAzB,EAAKC,MAAMD,WACpB,EAAKG,SAAS,CACZO,QAAS,EAAKN,oBA3FN,EAgGdO,UAAY,WACmB,sBAAzB,EAAKV,MAAMI,UACb,EAAKF,SAAS,CACZO,QAAS,EAAKL,cAEkB,sBAAzB,EAAKJ,MAAMI,WACpB,EAAKF,SAAS,CACZO,QAAS,EAAKJ,oBAvGN,EA4GdM,MAAQ,WACN,EAAKT,SAAS,CACZD,MAAO,KA5GT,EAAKD,MAAQ,CACXC,MAAO,EACPF,UAAW,oBACXK,UAAW,qBALD,E,sEAmHZ,OACE,yBAAKQ,UAAU,aACX,yBAAKA,UAAU,UAAf,WACA,yBAAKA,UAAU,WACb,4BAAKC,KAAKb,MAAMC,OAChB,4BAAQa,KAAK,SAASC,QAASF,KAAKF,OAApC,SACA,4BAAQG,KAAK,SAASC,QAASF,KAAKd,WAApC,aACA,4BAAQe,KAAK,SAASC,QAASF,KAAKT,WAApC,aACA,yBAAKQ,UAAU,UACb,4BAAQE,KAAK,SAASC,QAASF,KAAKL,UAAWQ,aAAcH,KAAKP,eAAgBO,KAAKb,MAAMD,WAC7F,4BAAQe,KAAK,SAASC,QAASF,KAAKH,UAAWM,aAAcH,KAAKN,eAAgBM,KAAKb,MAAMI,kB,GA9HrFa,aCUFC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAACC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.0316c994.chunk.js","sourcesContent":["import React, {Component} from 'react';\n\nclass Counter extends Component {\n  constructor() {\n    super();\n    this.state = {\n      count: 0,\n      increment: 'Single Increments',\n      decrement: 'Single Decrements'\n    }\n  }\n\n  // this is where we are going to put our methods\n  increment = () => {\n    if (this.state.count < 20) {\n      this.setState({\n        count: this.state.count + 1\n      })\n    } else {\n      this.setState({\n        count: 20\n      })\n    }\n  }\n\n  incrementByTwo = () => {\n    if ((this.state.count < 20) && (this.state.count !== 19)) {\n      this.setState({\n        count: this.state.count + 2\n      })\n    } else {\n      this.setState({\n        count: 20\n      })\n    }\n  }\n\n  decrement = () => {\n    if (this.state.count > 0) {\n      this.setState({\n        count: this.state.count - 1\n      })\n    } else {\n      this.setState({\n        count: 0\n      })\n    }\n  }\n\n  decrementByTwo = () => {\n    if ((this.state.count > 0) && (this.state.count !== 1)) {\n      this.setState({\n        count: this.state.count - 2\n      })\n    } else {\n      this.setState({\n        count: 0\n      })\n    }\n  }\n\n  toggleIncDisp = () => {\n    if (this.state.increment === 'Double Increments') {\n      this.setState({\n        increment: 'Single Increments',\n\n      })\n    } else {\n      this.setState({\n        increment: 'Double Increments'\n      })\n    }\n  }\n\n  toggleDecDisp = () => {\n    if (this.state.decrement === 'Double Decrements') {\n      this.setState({\n        decrement: 'Single Decrements',\n\n      })\n    } else {\n      this.setState({\n        decrement: 'Double Decrements'\n      })\n    }\n  }\n\n  toggleInc = () => {\n    if (this.state.increment === 'Single Increments') {\n      this.setState({\n        counter: this.increment()\n      })\n    } else if (this.state.increment === 'Double Increments') {\n      this.setState({\n        counter: this.incrementByTwo()\n      })\n    }\n  }\n\n  toggleDec = () => {\n    if (this.state.decrement === 'Single Decrements') {\n      this.setState({\n        counter: this.decrement() \n      })\n    } else if (this.state.decrement === 'Double Decrements') {\n      this.setState({\n        counter: this.decrementByTwo()\n      })\n    }\n  }\n\n  clear = () => {\n    this.setState({\n      count: 0,\n    })\n  }\n\n  render() {\n    return(\n      <div className=\"container\">\n          <div className=\"navbar\">Counter</div>\n          <div className=\"counter\">\n            <h1>{this.state.count}</h1>\n            <button type=\"button\" onClick={this.clear}>Clear</button>\n            <button type=\"button\" onClick={this.increment}>Increment</button>\n            <button type=\"button\" onClick={this.decrement}>Decrement</button>\n            <div className=\"double\"> \n              <button type=\"button\" onClick={this.toggleInc} onMouseEnter={this.toggleIncDisp}>{this.state.increment}</button>\n              <button type=\"button\" onClick={this.toggleDec} onMouseEnter={this.toggleDecDisp}>{this.state.decrement}</button>\n            </div> \n          </div>\n        </div>\n    )\n  }\n}\n\nexport default Counter;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}